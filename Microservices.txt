
Microservices
==================


monolithic vs microsercices 

==> single jar or war 			==> independent packaging for each service 
==> single repo				==> multilpe repo



==> microservices is the design pattern that develops the single application as a set of small services 

==> Each service runs in its own process. The services communicate with clients, and often each other, using lightweight protocols, often over messaging or HTTP.










============================================================================================================================================================================================


The CAP Theorem (FOR MONGODB)
===================

The CAP theorem refers to the three attributes of distributed data stores: 

==> Consistency:
		==> All reads receive the most recent write or an error.


==> Availability: 
		==> All reads contain data, but it might not be the most recent.


==> Partition tolerance:
		==>  The system continues to operate despite network failures.



==> According to the CAP theorem, only two of the three properties (Consistency, Availability, and Partition-tolerance) can be guaranteed at any given time in distributed data stores, but never all three. 

==> Since distributed data stores are partitioned by nature, and the assumption is that network failure will happen, partition tolerance is considered mandatory. As a result, the theorem argues that any system has to select between complete Consistency and complete Availability. 

		==> Consistency + Partition Tolerance (CP):
			==>  Every client sees the same data at a given point in time, this is mostly used with storage-based, big cache scenarios favoring consistency over availability. 


		==> Availability + Partition Tolerance (AP): 
			==> Every client receives a response for all read and write requests at all times, regardless of the state of any individual node in the system. This combination can be found in distributed transactional systems favoring availability over consistency. 



============================================================================================================================================================================================


SAGA PATTERN 
====================



==> it is a design pattern that is long lived sequence of smaller transections 

==> used to manage data consistancy across multilple microservices 

==> each transection is executed by a single service and the state changed are broadcasted to other services involve in saga 

==> alternative approch to a ACID transection model that may not be feasible in distributed environment( BCZ THERE IS NO ROLL BACK METHOD IN ACID EITHER THE TRANSECTION COMPLETES OR NOTHING HAPPENS, DUE TO WHICH THE OTHER SERVICES DOESN'T GET NOTIFIED ABOUT THE TRANSECTION COMPLETION OR FAILURE HENCE IT IS NOT FEASIBLE IN DISTRIBUTED ENVIRONMENT  )



 
Features of SAGA Pattern
===========================

==> Coordinated transactions:
			
			==> The SAGA pattern provides a way to coordinate transactions that involve multiple services or processes. 
			
			==> The pattern defines a sequence of steps, each of which can involve a separate service or process, that are executed in a coordinated manner to complete the 			    transaction.



==> Compensation and rollback: 
			==> The SAGA pattern includes a mechanism for compensating or rolling back the transaction if one of the steps fails. This mechanism ensures that the transaction 			    remains consistent even if one or more of the steps fail.



==> Distributed transactions:
			==>  The SAGA pattern supports distributed transactions that span multiple services or processes. 
			
			==> The pattern provides a way to coordinate the transaction across these services or processes in a consistent manner.


==> Asynchronous processing: 
			==> The SAGA pattern can support asynchronous processing, which allows for greater concurrency and performance. 
			
			==> This is especially important in distributed systems where the processing time of different services or processes may vary.


==> Error handling: 
			==> The SAGA pattern provides a standardized way to handle errors that occur during the transaction. 
			
			==> The pattern ensures that errors are handled consistently across all services or processes involved in the transaction.


==> Scalability: 
			==> The SAGA pattern can scale to handle large and complex transactions that involve multiple services or processes. 
		
			==> The pattern provides a way to break down the transaction into smaller, more manageable steps, which can be executed in parallel across different services or 			    processes. 







============================================================================================================================================================================================


2 PHASE COMMIT PROTOCOL 
========================

==> it is pattern for distributed transections 

==> it maintains ACID properties for distributed transections 

==> Transection manger manages the transection in 2 phase commit
	
	==> first  it will prepare for commit or abort 
	
	==> second it will perform commit or abort 


	==> PHASE 1:-> PREPARATION OR VOTING 
	====================================
		
		==> TM (transection manager) sends query to commit to all participants 
		
		==> participants reply with yes or no , if it is yes then it is ready for the commit and if no the it is for abort 
	
		==> whatever happens the logs are maintained , undo log files are for abort (ROLLBACK) and redo log files are for commit 	

		==> if the TM asks for abort or commit transection they take help from these undo logs and redo logs respectively 

		==> if any of the service returns no then TM sends abort(ROLLBACK) request to all the services 



	==> PHASE 2:-> Action 
	=======================
		
		==> COMMIT:->
			
			==> TM sends COMMIT message to all the participants(services)
			
			==> each participants completes the operation and releases the lock and sends acknoledgement to TM
		
			==> TM marks the transection complete with sucess
								   =======
		
		
		==> ABORT:->
			
			==> TM sends abort message to all the participants 
	
			==> each participants aborts the operation and releases the lock and sends acknoledgement to TM
	
			==> TM marks the transection complete with Failure 
								   =======



==> Challenges 
===============
	
	==> if there is no response form the participants services then the resources is locked untill the timeout 


============================================================================================================================================================================================



Aggregation Pattern (Design Patterns for Microservices)
=========================================================


==> The aggregator design pattern describes a service that gets a request then makes a several request to different services combines the result and then responds to the initial request 

==> By Three ways you can implement aggregator design pattern 
	
	
	1> parallel (Scatter gather pattern)
	
	2> chain pattern 
	
	3> branch pattern 






============================================================================================================================================================================================

Error Handling in Spring Boot Microservices
============================================

==> Define a custom error response model.
==> Define the API model you want to validate.
==> Define a Global Exception Handler and customise for each exception.



============================================================================================================================================================================================



MONOLITHIC to MICROSERVICES MIGRATION process:->
=================================================


==> Different rate of change 
		
	==> If your application has some portions that change more frequently than others, then it may be time to split them up into microservices 



==> Different Scalability Requirements

	==> Measure and monitor your application to determine where scalability requirements can affect your need for microservices.

	==> When looking at scalability requirements, measurement is key. Without proper monitoring, you won’t be able to determine where your memory or CPU hogs live. Or you may not know 	    which APIs receive more traffic.


==> Different Reliability Needs

	==> Reliability needs differ across systems and applications. Aim to protect your critical systems with microservices when appropriate.



==> Different User Base 

	==>  You’ll have external users or customers, internal sales or purchasing folks, and perhaps even plant personnel in a manufacturing setting. All of these customers have different 	     needs.

	==> separate applications based on those needs.



	1> Identify logical components.
	2> Flatten and refactor components.
	3> Identify component dependencies.
	4> Identify component groups.
	5> Create an API for remote user interface.
	6> Migrate component groups to macroservices (move component groups to separate projects and make separate deployments).
	7> Migrate macroservices to microservices.
	8> Repeat steps 6-7 until complete.



===========================================================================================================================================================================================


DECOMPOSITION PATTERN :->
==========================


==> Decompose by Business Capability


	==> split the application as a set of loosely coupled services in order to accelerate software development processes.

	==> Services must be cohesive. A service should implement a small set of strongly related functions.
	
	==> Services must be loosely coupled — each service as an API that encapsulates its implementation.

	==> “Decompose by Business Capability” pattern offers that;


		==> Define services corresponding to business capabilities.

		==> A business capability is a concept from business architecture modeling.

		==> A business service should generate value.	


	EX: product service shoud be deal with only products 
	    order service should deal with orders and so on	



==> Decompose by Subdomain
	
	==> In order to apply Decompose by Subdomain model, we should define services corresponding to Domain-Driven Design (DDD) subdomains.
	
	==> A domain is consists of multiple subdomains. Each subdomain corresponds to a different part of the business.

	
	Ex:- product domain should work with only products related services 
	     order domain should work with only order related services 



============================================================================================================================================================================================

API Gateway Pattern
=====================
















============================================================================================================================================================================================

Service Discovery 
===================


==> NEED :-> The microservices -Based Applications typically runs in virtualized or containerized environment . the number of instances and its locations changes Dynamically . We need to 	     know where these instances are and their names to allow requests to arrive at targeted Microservice . hence to discover that we need Service Discovery Mechanism .


==> When a microservice architecture is implemented it is neccesary for it to communicate with the other microservice for which it has to know on which instance it is deployed or in which container it is running so for that it uses the mechanism to discover the location and names of the containers or instances it is called as Service Discovery.

==> The service discovery mechanism helps us to determine where the instances Are located .

==> Due to this Service Discovery Mechanism it acts like a Service Registry as it knows where each instances are located .


==> Service Discovery handles requests in two parts :
	
	==> it provides a mechanism for an instance to register and say "I'm here"

	==> it provides the way to find the service when it is registered.
 	


==> flow for two microservices communicating with each other 

	
	==> Service Provider microservice will send the location of it to Service Registry .
	
	==> The Service Consumer Microservice will ask the Service Registry for the location of Service Provider .

	==> The Location of Service Provider is serched By the Service registry in the internal Database and returned to the Service Consumer.

	==> Now the service Consumer can make Direct requests to the Service Provider .




==> It has Two Types 

	
	1> Client Side Service Discovery 
	
	2> Server Side Service Discovery



1> Client Side Service Discovery :-> 

	
	==> When using Client side Discovery , The Service COnsumer is Responsible for determining the network locations of availaible Service instance and load balancing request between 	    them
	
	==> The Client Queries the Service register . 

	==> then the client uses the load Balancing algorithm to choose one of the availaible service Instances and performs a Request.
	
	==> Giving Resposibility for client side load balancing is both burden and a Advantage .It’s an advantage because it saves an extra hop that we would’ve had with a dedicated load 	    balancer. It’s a disadvantage because the Service Consumer must implement the load balancing logic.  




2> Server Side Service Discovery


	==> Server side Discovery Model is an alternate for Client side Discovery , which uses an intermediatery that acts as a Load Balancer .
	
	==> The Client makes a request to a service via load Balancer that acts as a organizer .
	
	==> the load balancer quries the service registry and routes each request to an availaible service instance .

	==> in this approch the dedicated actor the load balancer does the job of load balancing . this is the main advantage of this approach.

	==> Creating this level of abstraction makes the service consumer lightweighted , as it doesnt have to deal with the lookup Procedure .
	
	
============================================================================================================================================================================================


Service Registry 
===================


==> It is a database containing the network locations of Service instances.

==> A service Registry must be highly availaible and up-to-date .

==> clients can cache the network paths obtained from the service registry , however this information becomes of no use , and clients wont reach the service instances.

==> A service Registry contains the cluster of servers that uses a replication protocol to maintain the consistancy 

==> Two ways by which we can Register a Service 
	
	
	1> Self Registration :->

		==> in this services are responsible for registering and deregistering the services itself in the service Registry.
	
		==> if necessary a service instances sends heartbeat requests to keep its registration alive . 

		
	
		==> Heartbeats are simple requests to microservice's API. Usually, for REST APIs you send GET /healthcheck, that should respond with HTTP status 200. If the request fails 		    or takes awfully long, it means that microservice is dead or hanged, and load balancer should not direct any requests to it.

		
	
		==> It doesnt require any other system components as intermediaries 
	
		==> Disadvantage is it couples the services to the service registry, which means you have to wrute the code for registrering the service in each language and framework used

		
	
	2> Third-Party Registration 

	
		==> in this services are not responsible for registering the services in the service registry.instead another component called service register is responsible for 			    registration.
	
		==> the service register keeps track of changes to running instances by polling the deployment environment or subscribing the events .

		==> when it detects a newly awailaible service instance , it records it in its database .
	
		==> The Service register also deregisters the terminated Service instances. 

		
	
		==> it decouples the services from service registry . There is no need to implement service Registration logic for each programming language or Framework.

		==> One disadvantage of this model is that, unless it’s embedded in the deployment environment, it’s yet another highly available system component that needs to be set up 		    and managed.




























	