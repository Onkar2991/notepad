Marker interface or empty interface or Tag interface
==========================================================================================================================================
	==>The main use of the Marker Interface in Java is to convey to the JVM that the class implementing some interface of this category has to be granted some special behavior. 
	==>it is an empty interface as it has no methods, fields or constants, etc.
	==>examples of marker interfaces 
		==>java.io.Serializable, 	
		==>java.lang.Cloneable,
		==>java.rmi.Remote, 
		==>javax.servlet.SingleThreadModel,
		==>javax.ejb.EnterpriseBean,
		==>java.util.RandomAccess,
		==>java.util.EventListener

serializable interface:->
	==>when a class implements the Serializable interface, which is a marker interface, then this is an indication to the JVM that the objects of this class can be serialized.
	==>Serialization is the process of conversion of an object into a static stream (sequence) of bytes, which can be saved to a database or transferred over a network.
	==>If we want to save the state of an object of a class into physical memory (e.g, a file) or retrieve an object's state which is already stored in the physical memory (e.g, a file), 	   then we must make it Serializable. In order to make a class Serializable,it needs to implement the Serializable Interface.
 
clonable interface:->
	==>when a class implements Cloneable Interface, then it indicates to the JVM that the objects of this class can be cloned.
	==>Cloning is the process of creating an exact copy of an object.
	==>This is used to indicate the JVM that the clone() method of the Object class can be used by the objects of the class which have implemented the Cloneable Interface.

Remote Interface:->
	==>Remote Interface is a marker interface in Java, which is defined in java.rmi package.
	==> It is used for Remote Method Invocation purposes.
		==>Remote Method Invocation or RMI is a mechanism that allows an object residing in one system JVM to access/invoke an object running on another system JVM.







jackson dependency